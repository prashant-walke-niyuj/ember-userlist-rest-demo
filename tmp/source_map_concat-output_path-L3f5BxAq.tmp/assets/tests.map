{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","demo/tests/app.lint-test.js","demo/tests/helpers/destroy-app.js","demo/tests/helpers/module-for-acceptance.js","demo/tests/helpers/start-app.js","demo/tests/integration/components/save-user-test.js","demo/tests/test-helper.js","demo/tests/tests.lint-test.js","demo/tests/unit/adapters/application-test.js","demo/tests/unit/models/cocktail-test.js","demo/tests/unit/models/users-test.js","demo/tests/unit/routes/account/edit-test.js","demo/tests/unit/routes/accounts/add-test.js","demo/tests/unit/routes/accounts/edit-test.js","demo/tests/unit/routes/accounts/view-test.js","demo/tests/unit/routes/cocktails/edit-test.js","demo/tests/unit/routes/cocktails/index-test.js","demo/tests/unit/routes/users/index-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('demo/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n5:13 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n5:13 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/save-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/save-user.js should pass ESLint\\n\\n2:8 - \\'Component\\' is defined but never used. (no-unused-vars)\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n6:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('models/account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/account.js should pass ESLint\\n\\n2:8 - \\'attr\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/cocktail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/cocktail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/account/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/account/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/accounts/add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/accounts/add.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/accounts/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/accounts/edit.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/accounts/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/accounts/index.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/accounts/view.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/accounts/view.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/cocktails/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cocktails/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/cocktails/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/cocktails/index.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/users/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/users/index.js should pass ESLint\\n\\n2:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n});","define('demo/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('demo/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'demo/tests/helpers/start-app', 'demo/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('demo/tests/helpers/start-app', ['exports', 'demo/app', 'demo/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('demo/tests/integration/components/save-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('save-user', 'Integration | Component | save user', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"76co+III\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"save-user\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"X1de1j+x\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"save-user\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('demo/tests/test-helper', ['demo/app', 'demo/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('demo/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/save-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/save-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/cocktail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/cocktail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/users-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/users-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/account/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/account/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accounts/add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accounts/add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accounts/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accounts/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accounts/view-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accounts/view-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cocktails/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cocktails/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cocktails/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cocktails/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/users/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/users/index-test.js should pass ESLint\\n\\n');\n  });\n});","define('demo/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('demo/tests/unit/models/cocktail-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('cocktail', 'Unit | Model | cocktail', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('demo/tests/unit/models/users-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('users', 'Unit | Model | users', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('demo/tests/unit/routes/account/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:account/edit', 'Unit | Route | account/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/accounts/add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:accounts/add', 'Unit | Route | accounts/add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/accounts/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:accounts/edit', 'Unit | Route | accounts/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/accounts/view-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:accounts/view', 'Unit | Route | accounts/view', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/cocktails/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:cocktails/edit', 'Unit | Route | cocktails/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/cocktails/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:cocktails/index', 'Unit | Route | cocktails/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demo/tests/unit/routes/users/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:users/index', 'Unit | Route | users/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('demo/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}